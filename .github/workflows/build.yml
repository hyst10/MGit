name: Released

# 触发条件: 这里是push以”v“开头的tag触发
on:
  push:
    # 根据branch或者tags来触发
    # branches:
    #  - main

    tags:
      - "v*"

#name: Build

#on:
  # Trigger the workflow on push or pull request,
  # but only for the main branch
#  push:
#    branches:
#      - main
#  pull_request:
#    types: [opened, synchronize]
jobs:
  build:
    runs-on: ubuntu-20.04

    steps:
    - uses: actions/checkout@v2
    - name: set up JDK 11
      uses: actions/setup-java@v2
      with:
        distribution: 'temurin'
        java-version: 11
    - name: Build with Gradle
      run: ./gradlew --no-daemon clean assembleDebug testDebug
    - name: Upload APK
        uses: actions/upload-artifact@v2
        with:
          # 设置压缩文件的名称，在控制台会得到WhuHelper-debug.zip文件的下载链接
          # 下载后解压缩，里面直接可以看到app-debug.apk，没有其他东西
          name: WhuHelper-debug
          path: app/build/outputs/apk/debug/app-debug.apk
 
  deploy:
    name: Upload Release Asset
    # 依赖上一个job
    needs: apk
    runs-on: ubuntu-latest
    # 只在tag时执行，即在自己终端运行以下代码后才会触发
    # git tag -a v0.1.0 -m "release 0.1.0 version"
    # git push origin –-tags
    if: contains(github.ref, 'tags/')
    steps:
      # 自己编写的shell命令
      # 学习如何设置单个任务的输出来被其他任务调用
      - name: Prepare Release
        # 设置id一般是为了其他step调用本步骤的输出
        id: prepare_release
        run: |
          TAG_NAME=`echo $GITHUB_REF | cut -d / -f3`
          echo ::set-output name=tag_name::$TAG_NAME
       - name: Download build result for job apk
        # 只有上一步获取到tag_name才继续，下载前面apk任务里面的WhuHelper-debug.zip文件
        # 自动解压缩到当前文件夹，自动删除原压缩文件
        # 多任务之间的数据交换
        if: steps.prepare_release.outputs.tag_name
        uses: actions/download-artifact@v2
        with:
          name: WhuHelper-debug
      - shell: bash
        # 手动更改apk名字
        run: |
          mv app-debug.apk  app-debug-${{steps.prepare_release.outputs.tag_name}}.apk 
       # 发布release，版本号是用户git push的tag里面的版本号，发布的只有代码压缩包（与手动默认发布一致）
      - name: Create Release
        id: create_release
        # 只有上一步获取到tag_name才继续
        if: steps.prepare_release.outputs.tag_name
        uses: actions/create-release@v1
        env:
          # GitHub 会自动创建 GITHUB_TOKEN 密码以在工作流程中使用
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          # 设置时区，默认是格林尼治时间
          # TZ: Asia/Shanghai
        with:
          tag_name: ${{steps.prepare_release.outputs.tag_name}}
          release_name: Release ${{steps.prepare_release.outputs.tag_name}} by zfb
          draft: false
          prerelease: false
      # 这一步是对上一步发布的release文件的补充，调用github api上传一个apk文件
      - name: Upload Release Asset
        id: upload-release-asset 
        # 只有create_release成功得到输出才继续
        if: steps.create_release.outputs.upload_url
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} 
          asset_path: ./app-debug-${{steps.prepare_release.outputs.tag_name}}.apk
          asset_name: app-debug-${{steps.prepare_release.outputs.tag_name}}.apk
          asset_content_type: application/vnd.android.package-archive

    
